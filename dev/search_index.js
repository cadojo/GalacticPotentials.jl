var documenterSearchIndex = {"docs":
[{"location":"examples/#Example-Usage","page":"Example Usage","title":"Example Usage","text":"","category":"section"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"First, let's use everyone's favorite toy potential: the Plummer potential.","category":"page"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"julia> using GalacticPotentials\n\njulia> field = PlummerPotential()\nModel PlummerPotential\nStates (3):\n  x(t)\n  y(t)\n  z(t)\nParameters (3):\n  G\n  m\n  b","category":"page"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"The Plummer potential field equation is shown below.","category":"page"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"Phi = - fracG msqrtb^2 + x^2 + y^2 + z^2","category":"page"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"Let's assume some massless particle which exists within this field. How will the particle move? As previously described, we can take the gradient of the scalar field Phi with respect to the state variables x, y, and z to find the force (per unit mass) applied to the particle at all points in space.","category":"page"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"julia> system = ODESystem(field)\nModel PlummerPotential with 6 equations\nStates (6):\n  x(t)\n  y(t)\n  z(t)\n  ẋ(t)\n  ẏ(t)\n  ż(t)\nParameters (3):\n  G\n  m\n  b","category":"page"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"The differential equations which define the system variable are shown below. Note that the gradient of the scalar potential field has been integrated into a system of first-order differential equations: the expressions for the gradient are shown in the state equations for fracd dotxd t, fracd dotyd t, and fracd dotzd t.","category":"page"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"beginaligned\nfracmathrmd xleft( t right)mathrmdt = textnormalxleft( t right) \nfracmathrmd yleft( t right)mathrmdt = textnormalyleft( t right) \nfracmathrmd zleft( t right)mathrmdt = textnormalzleft( t right) \nfracmathrmd textnormalxleft( t right)mathrmdt = frac - G m xleft( t right)left( sqrtb^2 + left( xleft( t right) right)^2 + left( yleft( t right) right)^2 + left( zleft( t right) right)^2 right)^3 \nfracmathrmd textnormalyleft( t right)mathrmdt = frac - G m yleft( t right)left( sqrtb^2 + left( xleft( t right) right)^2 + left( yleft( t right) right)^2 + left( zleft( t right) right)^2 right)^3 \nfracmathrmd textnormalzleft( t right)mathrmdt = frac - G m zleft( t right)left( sqrtb^2 + left( xleft( t right) right)^2 + left( yleft( t right) right)^2 + left( zleft( t right) right)^2 right)^3\nendaligned","category":"page"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"The ModelingToolkit.jl AbstractSystem interface methods are defined for all potential fields within GalacticPotentials.jl. Specifically, all fields in GalacticPotentials.jl are subtypes of AbstractTimeDependentSystem. Special subtype and method implementations have been added to GalacticPotentials.jl as needed.","category":"page"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"julia> using ModelingToolkit\n\njulia> G = calculate_gradient(field)\n3-element Vector{Num}:\n (-((-G*m) / (sqrt(b^2 + x(t)^2 + y(t)^2 + z(t)^2)^2))*x(t)) / sqrt(b^2 + x(t)^2 + y(t)^2 + z(t)^2)\n (-((-G*m) / (sqrt(b^2 + x(t)^2 + y(t)^2 + z(t)^2)^2))*y(t)) / sqrt(b^2 + x(t)^2 + y(t)^2 + z(t)^2)\n (-((-G*m) / (sqrt(b^2 + x(t)^2 + y(t)^2 + z(t)^2)^2))*z(t)) / sqrt(b^2 + x(t)^2 + y(t)^2 + z(t)^2)\n\njulia> J = calculate_jacobian(system)\n6×6 Matrix{Num}:\n  … # expression left out of documentation for brevity\n\njulia> f = generate_function(field)\n:(function (ˍ₋arg1, ˍ₋arg2)\n      begin\n          (/)((*)((*)(-1, ˍ₋arg2[1]), ˍ₋arg2[2]), (sqrt)((+)((+)((+)((^)(ˍ₋arg2[3], 2), (^)(ˍ₋arg1[1], 2)), (^)(ˍ₋arg1[2], 2)), (^)(ˍ₋arg1[3], 2))))\n      end\n  end)\n","category":"page"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"Special constructors for ODESystem and ODEProblem – two SciML types – are defined for all potential fields within GalacticPotentials.jl. The ODESystem constructor was already illustrated above. Let's look at the ODEProblem constructor now.","category":"page"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"julia> problem = let\n  p = randn(3)\n  u0 = randn(6)\n  ts = randn(2)\n\n  ODEProblem(field, u0, ts, p)\nend","category":"page"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"It's generally safer to use variable maps to provide initial conditions for your ODEProblem. Variable maps allow for an arbitrary state vector order; the ODEProblem call above assumes the parameter and state vector orders!","category":"page"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"julia> problem = let model = system\n\n  p = @nonamespace Dict(\n      model.G => 6.6743e-20, # field strength (km³ kg⁻¹ s⁻²)\n      model.m => 6e31,       # mass (kg)\n      model.b => 1e-6        # softening parameter (unitless)\n  )\n\n  u0 = @nonamespace Dict(\n      model.x => 11e5,\n      model.y => 5e5,\n      model.z => 0,\n      model.Δx => 1e3,\n      model.Δy => 1e3,\n      model.Δz => 0\n  )\n\n  ts = (0.0, 1e6)\n\n  problem = ODEProblem(model, u0, ts, p)\nend","category":"page"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"With the ODEProblem defined, you can use OrdinaryDiffEq.jl or DifferentialEquations.jl to numerically integrate the orbit, and Plots.jl to plot the result! For more information, consult the SciML documentation, or the GalacticPotentials.jl Getting Started page.","category":"page"},{"location":"potentials/#Gravitational-Potentials","page":"Gravitational Potentials","title":"Gravitational Potentials","text":"","category":"section"},{"location":"potentials/","page":"Gravitational Potentials","title":"Gravitational Potentials","text":"Gravitational potential fields provide an alternative (approximate) approach to large-dimensioned n-body systems. Rather than tracking the orbits of all particles in an n-dimensional system, potential fields allow you to integrate one orbit at a time. The Plummer potential field is a common potential function used in the field of galactic dynamics; the expression for the Plummer potential is shown below: G is the gravitational field strength, m is the mass of the central body, and b is a softening parameter to avoid infinities when the position of the particle (x, y, z) is near the origin.","category":"page"},{"location":"potentials/","page":"Gravitational Potentials","title":"Gravitational Potentials","text":"Phi = - fracG msqrtb^2 + x^2 + y^2 + z^2","category":"page"},{"location":"potentials/","page":"Gravitational Potentials","title":"Gravitational Potentials","text":"Given any scalar potential field, the field's gradient provides the strength and force applied to a body at any position in the field per unit mass. If we treat the orbiting body as a point mass, then we can use the general ordinary differential equation below to numerically integrate any orbit along the potential with state vector u, parameter vector p, and scalar time t.","category":"page"},{"location":"potentials/","page":"Gravitational Potentials","title":"Gravitational Potentials","text":"dotu = -nabla Phi(upt)","category":"page"},{"location":"potentials/","page":"Gravitational Potentials","title":"Gravitational Potentials","text":"Note the generality! This kind of recipe is well suited to tools like ModelingToolkit.jl: you may write your expressions mathematically and let the SciML ecosystem generate fast and non-allocating codes, and efficiently integrate the dynamics forward (or backward) in time. GalacticPotentials.jl provides mathematical descriptions of common scalar potential fields used in galactic dynamics, and hooks these descriptions into ModelingToolkit.jl types for ease of use.","category":"page"},{"location":"reference/#Documentation","page":"Reference","title":"Documentation","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"All docstrings!","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [\n    GalacticPotentials\n]\nOrder = [:module, :type, :function]","category":"page"},{"location":"reference/#ModelingToolkit.ODESystem-Tuple{GalacticPotentials.AbstractScalarField}","page":"Reference","title":"ModelingToolkit.ODESystem","text":"ODESystem(field; var_map_to_dvs)\n\n\nConstruct an ODESystem from an AbstractScalarField by taking the gradient of  the field's value with respect to the state variables. Symbols which describe  the state derivatives can be provided via the var_map_to_dvs keyword argument. Alternatively, default state derivative symbols are used: :ẋ, :ẏ, and :ż for  :x, :y, :z states, and :Δstate otherwise.\n\nExample\n\nODESystem(field; var_map_to_dvs = Dict(:x => :ẋ, :y => :ẏ, :z => :ż))\n\n\n\n\n\n","category":"method"},{"location":"reference/#GalacticPotentials.HarmonicOscillatorPotential","page":"Reference","title":"GalacticPotentials.HarmonicOscillatorPotential","text":"HarmonicOscillatorPotential(; ...)\nHarmonicOscillatorPotential(N; name, kwargs...)\n\n\nThe potential due to a harmonic oscillator.\n\nPhi = 05 omega^2 x^2\n\n\n\n\n\n","category":"function"},{"location":"reference/#GalacticPotentials.HenonHeilesPotential-Tuple{}","page":"Reference","title":"GalacticPotentials.HenonHeilesPotential","text":"HenonHeilesPotential(; name, kwargs...)\n\n\nThe Henon-Heiles potential.\n\nPhi = 10 x^2 y + 05 x^2 - 0333333333333333 y^3 + 05 y^2\n\n\n\n\n\n","category":"method"},{"location":"reference/#GalacticPotentials.HernquistPotential-Tuple{}","page":"Reference","title":"GalacticPotentials.HernquistPotential","text":"HernquistPotential(; name, kwargs...)\n\n\nThe Hernquist potential.\n\nPhi = - fracG mc + sqrtx^2 + y^2 + z^2\n\n\n\n\n\n","category":"method"},{"location":"reference/#GalacticPotentials.IsochronePotential-Tuple{}","page":"Reference","title":"GalacticPotentials.IsochronePotential","text":"IsochronePotential(; name, kwargs...)\n\n\nThe Isochrone potential.\n\nPhi = - fracG mb + sqrtb^2 + x^2 + y^2 + z^2\n\n\n\n\n\n","category":"method"},{"location":"reference/#GalacticPotentials.JaffePotential-Tuple{}","page":"Reference","title":"GalacticPotentials.JaffePotential","text":"JaffePotential(; name, kwargs...)\n\n\nThe Jaffe potential.\n\nPhi = fracG m logleft(fracsqrtx^2 + y^2 + z^2c + sqrtx^2 + y^2 + z^2 right)c\n\n\n\n\n\n","category":"method"},{"location":"reference/#GalacticPotentials.KeplerPotential-Tuple{}","page":"Reference","title":"GalacticPotentials.KeplerPotential","text":"KeplerPotential(; name, kwargs...)\n\n\nThe Kepler potential.\n\nPhi = - fracG msqrtx^2 + y^2 + z^2\n\n\n\n\n\n","category":"method"},{"location":"reference/#GalacticPotentials.KuzminPotential-Tuple{}","page":"Reference","title":"GalacticPotentials.KuzminPotential","text":"KuzminPotential(; name, kwargs...)\n\n\nThe Kuzmin potential.\n\nPhi = - fracG msqrtx^2 + y^2 + left(a + leftzrightright)^2\n\n\n\n\n\n","category":"method"},{"location":"reference/#GalacticPotentials.LogarithmicPotential-Tuple{}","page":"Reference","title":"GalacticPotentials.LogarithmicPotential","text":"LogarithmicPotential(; name, kwargs...)\n\n\nThe logarithmic potential.\n\nPhi = 05 v_c^2 logleft(r_h^2 + fracz^2q_3^2 + fracy^2q_2^2 + fracx^2q_1^2 right)\n\n\n\n\n\n","category":"method"},{"location":"reference/#GalacticPotentials.LongMuraliBarPotential-Tuple{}","page":"Reference","title":"GalacticPotentials.LongMuraliBarPotential","text":"LongMuraliBarPotential(; name, kwargs...)\n\n\nThe long Murali-bar potential.\n\nPhi = fracG m logleft(frac- a + x cosleft(alpha right) + y sinleft(alpha right) + sqrtleft(b + sqrtc^2 + z^2right)^2 + left(- x sinleft(alpha right) + y cosleft(alpha right)right)^2 + left(a - x cosleft(alpha right) - y sinleft(alpha right)right)^2a + x cosleft(alpha right) + y sinleft(alpha right) + sqrtleft(b + sqrtc^2 + z^2right)^2 + left(- x sinleft(alpha right) + y cosleft(alpha right)right)^2 + left(a + x cosleft(alpha right) + y sinleft(alpha right)right)^2 right)2 a\n\n\n\n\n\n","category":"method"},{"location":"reference/#GalacticPotentials.MiyamotoNagaiPotential-Tuple{}","page":"Reference","title":"GalacticPotentials.MiyamotoNagaiPotential","text":"MiyamotoNagaiPotential(; name, kwargs...)\n\n\nThe Miyamoto-Nagai potential.\n\nPhi = - fracG msqrtx^2 + y^2 + left(a + sqrtb^2 + z^2right)^2\n\n\n\n\n\n","category":"method"},{"location":"reference/#GalacticPotentials.NFWPotential-Tuple{}","page":"Reference","title":"GalacticPotentials.NFWPotential","text":"NFWPotential(; name, kwargs...)\n\n\nThe NFW potential.\n\nPhi = - fracG m logleft(1 + fracsqrtfracz^2c^2 + fracy^2b^2 + fracx^2a^2r_s right)sqrtfracz^2c^2 + fracy^2b^2 + fracx^2a^2\n\n\n\n\n\n","category":"method"},{"location":"reference/#GalacticPotentials.PlummerPotential-Tuple{}","page":"Reference","title":"GalacticPotentials.PlummerPotential","text":"PlummerPotential(; name, kwargs...)\n\n\nThe Plummer potential.\n\nPhi = - fracG msqrtb^2 + x^2 + y^2 + z^2\n\n\n\n\n\n","category":"method"},{"location":"reference/#GalacticPotentials.PowerLawCutoffPotential-Tuple{}","page":"Reference","title":"GalacticPotentials.PowerLawCutoffPotential","text":"PowerLawCutoffPotential(; name, kwargs...)\n\n\nThe power-law cutoff potential.\n\nwarning: Warning\nNot yet implemented!\n\nPhi = fracG alpha m gammaleft(15 - fracalpha2 fracx^2 + y^2 + z^2r_c^2right)2 sqrtx^2 + y^2 + z^2 Gammaleft(25 - fracalpha2right) - frac3 G m gammaleft(15 - fracalpha2 fracx^2 + y^2 + z^2r_c^2right)2 sqrtx^2 + y^2 + z^2 Gammaleft(25 - fracalpha2right) + fracG m gammaleft(1 - fracalpha2 fracx^2 + y^2 + z^2r_c^2right)r_c Gammaleft(15 - fracalpha2right)\n\n\n\n\n\n","category":"method"},{"location":"reference/#GalacticPotentials.SatohPotential-Tuple{}","page":"Reference","title":"GalacticPotentials.SatohPotential","text":"SatohPotential(; name, kwargs...)\n\n\nThe Satoh potential.\n\nwarning: Warning\nNot yet implemented!\n\nPhi = - fracG msqrta left(a + 2 sqrtb^2 + z^2right) + x^2 + y^2 + z^2\n\n\n\n\n\n","category":"method"},{"location":"reference/#GalacticPotentials.StonePotential-Tuple{}","page":"Reference","title":"GalacticPotentials.StonePotential","text":"StonePotential(; name, kwargs...)\n\n\nThe StonePotential potential.\n\nwarning: Warning\nNot yet implemented!\n\nPhi = - frac2 G m left(- fracr_c operatornameatanleft(fracsqrtx^2 + y^2 + z^2r_c right)sqrtx^2 + y^2 + z^2 + fracr_h operatornameatanleft(fracsqrtx^2 + y^2 + z^2r_h right)sqrtx^2 + y^2 + z^2 + 05 logleft(fracr_h^2 + x^2 + y^2 + z^2r_c^2 + x^2 + y^2 + z^2 right)right)- 314159265358979 r_c + 314159265358979 r_h\n\n\n\n\n\n","category":"method"},{"location":"reference/#GalacticPotentials.gamma-Tuple{Any}","page":"Reference","title":"GalacticPotentials.gamma","text":"gamma(x)\n\n\nComputes the gamma function through SpecialFunctions.gamma.\n\nnote: Note\nThis wrapper is required for Symbolics function registration purposes. \n\n\n\n\n\n","category":"method"},{"location":"reference/#GalacticPotentials.lowergamma-Tuple{Any, Any}","page":"Reference","title":"GalacticPotentials.lowergamma","text":"lowergamma(a, x)\n\n\nComputes the lower incomplete gamma function.\n\n\n\n\n\n","category":"method"},{"location":"#GalacticPotentials.jl","page":"Getting Started","title":"GalacticPotentials.jl","text":"","category":"section"},{"location":"","page":"Getting Started","title":"Getting Started","text":"Common models within galactic dynamics!","category":"page"},{"location":"#Overview","page":"Getting Started","title":"Overview","text":"","category":"section"},{"location":"","page":"Getting Started","title":"Getting Started","text":"This package extends ModelingToolkit to represent common galactic potentials. All available potentials are shown on the Reference page.","category":"page"},{"location":"#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"","page":"Getting Started","title":"Getting Started","text":"Choose one of the two lines below!","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"pkg> GalacticPotentials             # in Julia's REPL","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"Pkg.add(\"GalacticPotentials.jl\")    # in Julia code","category":"page"},{"location":"#Usage","page":"Getting Started","title":"Usage","text":"","category":"section"},{"location":"","page":"Getting Started","title":"Getting Started","text":"This package is intended to be used alongside ModelingToolkit.jl and the rest of the SciML ecosystem. Scalar potential fields within gala and galpy – two popular Python packages for galactic dynamics – were used to bootstrap this package. All available potential fields are shown on the Reference page. See the code block below for a one-click example of GalacticPotentials.jl usage.","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"using Plots\nusing ModelingToolkit\nusing DifferentialEquations\nusing GalacticPotentials\n\nlet model = ODESystem(PlummerPotential())\n\n    p = @nonamespace Dict(\n        model.G => 6.6743e-20, # field strength (km³ kg⁻¹ s⁻²)\n        model.m => 6e31,       # mass (kg)\n        model.b => 1e-6        # softening parameter (unitless)\n    )\n\n    u0 = @nonamespace Dict(\n        model.x => 11e5,\n        model.y => 5e5,\n        model.z => 0,\n        model.Δx => 1e3,\n        model.Δy => 1e3,\n        model.Δz => 0\n    )\n\n    ts = (0.0, 1e6)\n\n    problem = ODEProblem(model, u0, ts, p)\n    solution = solve(problem; reltol=1e-14, abstol=1e-14)\n\n    plot(solution; idxs=(:x,:y), label=:none, dpi = 400, aspect_ratio=:equal)\nend","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"}]
}
